<?php

namespace __namespace;

class __class extends __basicClass
{    
    public function __construct()
    {        
        $this->user = \Auth::check()?\Auth::user():null;
    }
    public $lastUpdate  = "__lastupdate";
    public $createValidator = [];
    public $updateValidator = [];
    public $importValidator = [];
    public $deleteValidator = [];
    public $excepts         = [];
    public $defaults        = __defaults;
    public $createAdditionalData = __autocreate;
    public $updateAdditionalData = __autoupdate;
    public $user;
//====================================================================USER ROLE LOGIC
    public function createRoleCheck()
    {
        return true;
    }
    public function updateRoleCheck()
    {
        return true;
    }
    public function deleteRoleCheck()
    {
        return true;
    }
    public function readRoleCheck()
    {
        return true;
    }
//======================================================================CREATE EVENT LOGIC
    public function createBefore($model, $arrayData, $metaData, $id=null)
    {
        //$arrayData["no_draft"] = $this->custom_getdraftid(null);
        $newModel = $model;
        $newArrayData  = array_merge($arrayData,[]);
        return [
            "model"  => $newModel,
            "data"   => $newArrayData,
        ];
    }

    public function createAfter($model, $arrayData, $metaData, $id=null)
    {        

    }
//======================================================================UPDATE EVENT LOGIC

    public function updateBefore($model, $arrayData, $metaData, $id=null)
    {
        $newModel = $model;
        $newArrayData  = array_merge($arrayData,[]);
        return [
            "model"  => $newModel,
            "data"   => $newArrayData,
        ];
    }

    public function updateAfter($model, $arrayData, $metaData, $id=null){

    }
//======================================================================DELETE EVENT LOGIC
    public function deleteBefore($model, $arrayData, $metaData, $id=null)
    {
        $newModel = $model;
        return [
            "model" => $newModel
        ];
    }
    public function deleteAfter($model, $arrayData, $metaData, $id=null)
    {
        
    }    
//======================================================================READ EVENT & OVERRIDE PARAMETER GET DATA JIKA PERLU
    public function overrideGetParams($params, $id=null)
    {
        /*if( $params->where_raw != '' && $params->where_raw != null ){
        	$params->where_raw = $params->where_raw." AND ";
        }*/
        if($id){
            $params->selectfield = $params->selectfield; //"id,kolom1,kolom2"
            $params->join        = $params->join;        //true(default)/false {TABLE AUTO JOIN DENGAN INDUK}
            $params->single      = $params->single;      //true/false(default) {AMBIL CHILDREN ATAU SINGLE}
            $params->addSelect   = null;
            $params->addJoin     = null;
          	$params->joinMax 	 = $params->joinMax; //default 0
        }else{
            $params->where_raw   = $params->where_raw;      //raw WHERE
            $params->order_by    = $params->order_by;       //nama_kolom
            $params->order_type  = $params->order_type;     //ASC/DESC
            $params->order_by_raw= $params->order_by_raw;   //nama_kolom1,nama_kolom2 ASC/DESC
            $params->search      = $params->search;         //string kata
            $params->searchfield = $params->searchfield;    //kolom1,kolom2 yang akan dimatching dengan where like
            $params->selectfield = $params->selectfield;    //id,kolom1,kolom2,kolom3
            $params->paginate    = $params->paginate;       //integer angka default 25
            $params->join        = $params->join;           //true(default)/false {ROW AUTO JOIN DENGAN INDUK}
            $params->addSelect   = null;
            $params->addJoin     = null;
          	$params->joinMax 	 = $params->joinMax; //default 0
            $params->group_by    = $params->group_by; //pastikan selectnya sama dg yg digroupby
        }
        return $params;
    }
//======================================================================READ EVENT & TRANSFORM DATA PER ROW
    public function transformRowData($row)
    {
        return array_merge($row,[]);
    }
//======================================================================SINGLE UPLOAD LANGSUNG RESPONSE
    public function custom_fileupload($request)
    {
        if(!$request->hasFile("file")){return response()->json("file harus ada",400);}
        $response = uploadfile($this,$request);
        return response()->json(is_array($response)?implode("\n",$response):$response,is_array($response)?400:200);
    }
//======================================================================IMPORT EXCEL
    public function custom_importexcel($request)
    {
        if(!$request->hasFile("file")){return response()->json("file harus ada",400);}
        return _uploadexcel($this, $request);
    }
//=======================================================================EXPORT EXCEL 
  	public function custom_exportexcel($request)
    {
      	$query = \DB::table($this->getTable())->get();
      	if( count($query)==0 ){
        	return "data kosong";
        }else{
    		return \Excel::download(new \ExportExcel($query), \Carbon\Carbon::now()->format('d-m-Y')."_".$this->getTable().'.xlsx');    
        }
    }
//==========================================================================

/*    public function metaFields($fields)
    {
        return [
            "nama_field"=>"readonly"
        ];
    }*/
/*    public function metaScript()
    {
        return js("alert('dari backend saat edit')");
    }*/
/*    public function custom_initialize()
    {
        return js("alert('dari backend saat create')");
    }*/
//========================================================================CUSTOM FUNCTION BEBAS TOTAL FUNGSINYA DIPREFIX "custom_"
    public function custom_getdraftid($request)
    {
        $data = $this->count()+1;
      	$char=strlen($data);
        return "DRAFT".str_repeat("0",7-$char).$data;
    }
}
