<?php

namespace __namespace;

class __class extends __basicClass
{    
    public function __construct()
    {        
        $this->user = \Auth::check()?\Auth::user():null;
    }
    public $lastUpdate  = "__lastupdate";
    public $createValidator = [];
    public $updateValidator = [];
    public $importValidator = [];
    public $deleteValidator = [];
    public $excepts         = [];
    public $defaults        = __defaults;
    public $createAdditionalData = __autocreate;
    public $updateAdditionalData = __autoupdate;
    public $user;

    public function createRoleCheck()
    {
        return true;
    }
    public function updateRoleCheck()
    {
        return true;
    }
    public function deleteRoleCheck()
    {
        return true;
    }
    public function readRoleCheck()
    {
        return true;
    }

    public function createBefore($model, $arrayData, $metaData, $id=null)
    {
        $newModel = $model;
        $newArrayData  = array_merge($arrayData,[]);
        return [
            "model"  => $newModel,
            "data"   => $newArrayData,
        ];
    }

    public function createAfter($model, $arrayData, $metaData, $id=null)
    {        

    }

    public function updateBefore($model, $arrayData, $metaData, $id=null)
    {
        $newModel = $model;
        $newArrayData  = array_merge($arrayData,[]);
        return [
            "model"  => $newModel,
            "data"   => $newArrayData,
        ];
    }

    public function updateAfter($model, $arrayData, $metaData, $id=null){

    }

    public function deleteBefore($model, $arrayData, $metaData, $id=null)
    {
        $newModel = $model;
        return [
            "model" => $newModel
        ];
    }
    public function deleteAfter($model, $arrayData, $metaData, $id=null)
    {
        
    }    
    public function createAfterTransaction($newdata, $olddata, $data, $meta)
    {
        //do here
    }
    public function updateAfterTransaction($newdata, $olddata, $data, $meta)
    {
        //do here
    }
    public function overrideGetParams($params, $id=null)
    {
        /*if( $params->where_raw != '' && $params->where_raw != null ){
        	$params->where_raw = $params->where_raw." AND ";
        }*/
        if($id){
            $params->selectfield = $params->selectfield;
            $params->join        = $params->join;
            $params->single      = $params->single;
            $params->addSelect   = null;
            $params->addJoin     = null;
          	$params->joinMax 	 = $params->joinMax;
        }else{
            $params->where_raw   = $params->where_raw;
            $params->order_by    = $params->order_by;
            $params->order_type  = $params->order_type;
            $params->order_by_raw= $params->order_by_raw;
            $params->search      = $params->search;
            $params->searchfield = $params->searchfield;
            $params->selectfield = $params->selectfield;
            $params->paginate    = $params->paginate;
            $params->join        = $params->join;
            $params->addSelect   = null;
            $params->addJoin     = null;
          	$params->joinMax 	 = $params->joinMax;
            $params->group_by    = $params->group_by;
        }
        return $params;
    }

    public function transformRowData($row)
    {
        return array_merge($row,[]);
    }

    public function custom_fileupload($request)
    {
        if(!$request->hasFile("file")){return response()->json("file harus ada",400);}
        $response = uploadfile($this,$request);
        return response()->json(is_array($response)?implode("\n",$response):$response,is_array($response)?400:200);
    }

    public function custom_importexcel($request)
    {
        if(!$request->hasFile("file")){return response()->json("file harus ada",400);}
        return _uploadexcel($this, $request);
    }

  	public function custom_exportexcel($request)
    {
      	$query = \DB::table($this->getTable())->get();
      	if( count($query)==0 ){
        	return "data kosong";
        }else{
    		return \Excel::download(new \ExportExcel($query), \Carbon::now()->format('d-m-Y')."_".$this->getTable().'.xlsx');    
        }
    }

    public function custom_getdraftid($request)
    {
        $karakterSeq = 4;
        $namakolom = "no_transaction";
        $prefix = "BB".date('Ymd');
        $data = $this->latest('id')->first();
      	if($data){
          $count = substr($data->$namakolom, -($karakterSeq)) + 1;        
        }else{
        	$count=1;
        }
        $no = $prefix . str_repeat("0", $karakterSeq - strlen($count)) . $count;
      	return response()->json($no);
    }

    /*public function metaFields($fields)
    {
        return [
            "nama_field"=>"readonly"
        ];
    }
    public function metaScript()
    {
        return js("alert('dari backend saat edit')");
    }
    public function custom_initialize()
    {
        return js("alert('dari backend saat create')");
    }*/

    /*public function frontendNotice(){
    	return implode("\n",[
        	"1. Catatan 1 field abc tidak boleh lagi",
          	"2. Field tanggal dengan format yyyy-mm-dd",          	
        ]);
    }*/
}
